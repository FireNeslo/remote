{"version":3,"file":"nslo-remote.js","names":[],"mappings":"","sources":["nslo-remote.js"],"sourcesContent":["!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.remote=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar Remote = require('./lib/remote');\n/**\n * Remote object \n * @module nslo-remote\n * @param {object} adapter  - message adapter\n * @param {object} [object] - object to share\n * @return {Remote} remote - remote interface object\n**/\nfunction remote(adapter, object) {'use strict';\n  var current, id = 0, pending = {}, events = {\n    \"request\" : function(event) {\n      var value = null, type = \"response\";\n      try {\n        value = current.resolve(event.value);\n      } catch(error) {\n        value = error;\n        type = \"error\";\n      }\n      adapter.postMessage({\n        id: event.id,\n        type : type,\n        value: value\n      });\n    },\n    \"response\": function(event) {\n      if(pending[event.id]) pending[event.id].resolve(event.value);\n      delete pending[event.id];\n    },\n    \"error\": function(event) {\n      if(pending[event.id]) pending[event.id].reject(event.value);\n      delete pending[event.id];\n    }\n  };\n  adapter.onMessage = function(message) {\n    events[message.data.type](message.data);\n  };  \n  return (current = new Remote(object, function(meta) {\n    return new Promise(function(resolve, reject) {\n      pending[id] = {\n        resolve : resolve,\n        reject  : reject\n      };\n      adapter.postMessage({\n        id: id++,\n        type: 'request',\n        value:meta\n      });\n    });\n  }));\n}\n\nmodule.exports = remote;\n},{\"./lib/remote\":2}],2:[function(require,module,exports){\n/**\n * Remote for event emitters \n * @module nslo-remote/remote\n * @class  remote/lib/remote\n * @param {object}   object    - api object\n * @param {request}  request   - request action\n * @param {array}    [actions] - list of actions\n * @returns {Remote} remote    - remote interface object\n**/\nfunction Remote(object, request, actions, id) {'use strict';\n  if(!this) return new Remote(object, request, actions);\n  if(!actions) actions = [];\n  function method(name) {\n    return function(key, value) {\n      var action = {\n        key   : key,\n        method: name,\n        value : value\n      };\n      return new Remote(object, request, [action].concat(actions));\n    };\n  }\n  /**\n   * Get a key\n   * @param {string} key - the key to get\n  **/\n  this.get    = method('get');\n  /**\n   * Set key to value\n   * @param {string} key - the key to set\n   * @param {string} value - the value to set\n  **/\n  this.put    = method('put');\n  /**\n   * Apply method\n   * @param {string} method - the method name\n   * @param {string} args   - the method arguments\n  **/\n  this.post   = method('post');\n  /**\n   * Delete key\n   * @param {string} key - key to delete\n  **/\n  this.delete = method('delete');\n  /**\n   * Thenable\n   * @param {function} [cb] - success callback\n   * @param {function} [eb] - error callback\n   * @param {function} [pb] - progress callback\n   * @return {Promise} result\n  **/\n  this.then = function then(cb,eb,pb) {\n    return (then.data||(then.data=request(actions))).then(cb,eb,pb);\n  };\n  this.resolve = function(actions) {\n    var action, value = object;\n    for(var i = actions.length-1; i >= 0 ; i--) {\n      action = actions[i];\n      switch(action.method) {\n        case \"get\": value = value[action.key]; break;\n        case \"put\": value = value[action.key] = action.value; break;\n        case \"post\": value = value[action.key].apply(value, action.value); break;\n        case \"delete\": value = delete value[action.key]; break;\n      }\n    }\n    return value;\n  };\n}\nmodule.exports = Remote;\n},{}]},{},[1])(1)\n});"],"sourceRoot":"/source/"}